import tkinter as tk
from PIL import Image, ImageTk
import os
import sys

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤–Ω—É—Ç—Ä–∏ .exe –∏–ª–∏ –≤ –ø–∞–ø–∫–µ —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π ===
def resource_path(relative_path):
    try:
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)

# === –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ ===
images_folder = resource_path("images")

# === –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ Screenshot_N.png –≤ –ø–∞–ø–∫–µ images ===
available_images = []
for i in range(1, 10):  # –ò—â–µ–º –¥–æ Screenshot_9.png
    img_name = f"Screenshot_{i}.png"
    img_path = os.path.join(images_folder, img_name)
    if os.path.exists(img_path):
        available_images.append(img_path)
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {img_path}")
    else:
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {img_path}")

if not available_images:
    print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    sys.exit("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

current_index = 0

# === –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ ===
root = tk.Tk()
root.title("Sticker")

# –£–±–∏—Ä–∞–µ–º —Ä–∞–º–∫—É –æ–∫–Ω–∞
root.overrideredirect(True)
root.attributes("-topmost", True)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –æ–∫–Ω–∞ ===
dragging = False
x_click = 0
y_click = 0

# === –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–æ–º ===
def start_move(event):
    global dragging, x_click, y_click
    dragging = True
    x_click = event.x_root
    y_click = event.y_root

def move_window(event):
    global x_click, y_click
    if dragging:
        dx = event.x_root - x_click
        dy = event.y_root - y_click
        new_x = root.winfo_x() + dx
        new_y = root.winfo_y() + dy
        root.geometry(f"+{new_x}+{new_y}")
        x_click = event.x_root
        y_click = event.y_root

def stop_move(event):
    global dragging
    dragging = False

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ===
def load_image(index):
    global current_index, photo
    current_index = index
    image_path = available_images[current_index]

    try:
        image = Image.open(image_path).convert("RGBA")
        width, height = image.size
        photo = ImageTk.PhotoImage(image)
        canvas.config(width=width, height=height)
        canvas.delete("all")
        canvas.create_image(width // 2, height // 2, anchor="center", image=photo)
        root.geometry(f"{width}x{height}")
        print(f"üñºÔ∏è –û—Ç–∫—Ä—ã—Ç–æ: {image_path}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

# === –§—É–Ω–∫—Ü–∏–∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è ===
def minimize_window(event=None):
    root.withdraw()

def restore_window(event=None):
    root.deiconify()
    root.focus_force()

# === –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å—Ç—Ä–µ–ª–∫–∞–º–∏ ‚Üê ‚Üí ===
def next_image(event=None):
    if current_index < len(available_images) - 1:
        load_image(current_index + 1)

def prev_image(event=None):
    if current_index > 0:
        load_image(current_index - 1)

# === –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ –ü–ö–ú ===
def exit_app(event=None):
    root.quit()
    root.destroy()

# === Canvas –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ===
canvas = tk.Canvas(root, highlightthickness=0, bg='black')
canvas.pack(fill="both", expand=True)

# –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
canvas.bind("<ButtonPress-1>", start_move)
canvas.bind("<B1-Motion>", move_window)
canvas.bind("<ButtonRelease-1>", stop_move)

# –ü—Ä–∏–≤—è–∑–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
root.bind("<Control-Alt-h>", lambda e: minimize_window())
root.bind("<Control-Alt-s>", lambda e: restore_window())
root.bind("<Right>", lambda e: next_image())
root.bind("<Left>", lambda e: prev_image())

# –ü—Ä–∏–≤—è–∑–∫–∞ –ü–ö–ú ‚Äî –∑–∞–∫—Ä—ã—Ç–∏–µ
canvas.bind("<Button-3>", exit_app)  # –ü–ö–ú –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ
root.bind("<Button-3>", exit_app)    # –ü–ö–ú –ø–æ –æ–∫–Ω—É

# === –ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ===
load_image(current_index)

# –î–µ–ª–∞–µ–º –æ–∫–Ω–æ —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—ã–º (–¥–ª—è —Ä–∞–±–æ—Ç—ã –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à)
root.after(100, lambda: root.focus_force())

# === –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ ===
root.mainloop()